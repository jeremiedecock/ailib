#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2019 Jeremie DECOCK (http://www.jdhp.org)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


# TODO:
# - Données sans tendance ni saisonnalité (pour AR, MA, ARMA)
# - Données avec tendance (pour ARIMA et méthodes de suppression de tendance)
# - Données avec saisonnalité (pour SARMA et méthodes désaisonnalisation)
# - Données avec tendance et saisonnalité (pour SARIMA)
# - Données avec causalité depuis une variable exogène (pour ARX)
# - Données multivariées (pour VAR)

"""
This module contains toy data (time series) to test TSA models.
"""

__all__ = ['additive_model_ts2']

import numpy as np
import pandas as pd

def additive_model_ts2(num_periods=10, T1=24, T2=4, relative_period_size=4,
                       noise_sigma=0.05, trend_slope=0.005, trend_intercept=3.):
    """A toy dataset generated by an additive model containing a trend, two
    levels of saisonality (with a periodicity of `T1=24` and `T=T1*T2=96` time
    steps by default) and a gaussian noise.
    
    Parameters
    ----------
    num_periods : int
        Number of periods `T` with `T = T1 * T2`. The size of the time serie
        is `T1 * T2 * num_periods`.
    T1 : int
        TODO
    T2 : int
        TODO relative period ; period T = T1 * T2
    noise_sigma : float
        The standard deviation of the gaussian noise added to the time serie.
    trend_slope : float
        The slope of the trend. The trend is modeled by a linear function
        having two parameters: the intercept and the slope.
    trend_intercept : float
        The intercept of the trend. The trend is modeled by a linear function
        having two parameters: the intercept and the slope.

    Returns
    -------
    Pandas DataFrame
        The generated time serie. Column `t` contains the time step and column
        `y` contains the value at the corresponding time step.
    """
    
    t = np.arange(T1 * T2 * num_periods)
    shift = int(T1 / 4)                                              # We shift t by -1/4 to start the time serie at 0 (i.e. we want sin(0) = -1 so that sin(0) + 1 = 0)
    y = np.sin(2. * np.pi * (t - shift) / float(T1)) + 1.

    for i in range(1, num_periods + 1):
        we_index = T1*T2*i
        y[we_index-T1+1:we_index] = 0

    y += trend_slope * t + trend_intercept                           # Add trend (additive model)
    y += np.random.normal(loc=0., scale=noise_sigma, size=y.shape)   # Add noise (additive model)
    
    df = pd.DataFrame(np.array([t, y]).T, columns=['t', 'y'])

    return df